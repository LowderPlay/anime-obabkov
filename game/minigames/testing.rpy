screen testing_screen:
    # TODO: —Å–¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ
    frame:
        align (0.5, 0.5)
        xysize (980, 350)

        vbox:
            spacing 20

            text "–¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å:"
            hbox:
                spacing 10
                for i in range(max_sequence_length):
                    fixed:
                        xysize (50, 50)
                        if len(current_sequence) > i:
                            text current_sequence[i]
                        else:
                            text "_"
                textbutton "<-":
                    action Function(erase_last)
      
            hbox:
                spacing 10
                for i in allowed_chars:
                    fixed:
                        xysize (50, 50)
                        textbutton i:
                            if len(current_sequence) < max_sequence_length:
                                action IncrementVariable("current_sequence", amount=i)

            if error != "":
                hbox:
                    text "–æ—à–∏–±–∫–∞: "
                    text error

            hbox:
                spacing 10
                textbutton "–æ—á–∏—Å—Ç–∏—Ç—å":
                    action [SetVariable("current_sequence", ""), SetVariable("error", "")]
                textbutton "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å":
                    action Function(check_sequence)
                # button:
                    # child Text("123")

default max_sequence_length = 10
default current_sequence = ""
default allowed_chars = "üèπüî™ü§úü¶∂üçî"
default error = ""

python early:
    def erase_last():
        global current_sequence
        current_sequence = current_sequence[:-1]

    def check_sequence():
        global current_sequence, error
        if len(current_sequence) < 7:
            error = "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 7-—Ö –¥–µ–π—Å—Ç–≤–∏–π"
        elif current_sequence.count(current_sequence[0]) == len(current_sequence):
            error = "–¥–µ–π—Å—Ç–≤–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏ - –±—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–µ–µ"
        elif "ü§ú" not in current_sequence:
            error = "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –¥–µ–π—Å—Ç–≤–∏–µ ü§ú - –∏–ª–∏ –∑–∞—Å—Å–∞–ª"
        elif "ü§úü§ú" in current_sequence:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ü§ú –¥–≤–∞ —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ - —É—Å—Ç–∞–Ω–µ—à—å"
        elif current_sequence.count("üèπ") > 3:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üèπ –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Ä–∞–∑ - —Å—Ç—Ä–µ–ª—ã –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è"
        elif current_sequence[0] != "üçî":
            error = "–ø–µ—Ä–µ–¥ –±–∏—Ç–≤–æ–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å üçî"
        elif current_sequence.count("üçî") > 1:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üçî –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞ - –æ–±—ä–µ—à—å—Å—è"
        elif "üèπüî™" in current_sequence or "üî™üèπ" in current_sequence:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üî™ –∏ üèπ —Ä—è–¥–æ–º - —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –º–µ–Ω—è—Ç—å –æ—Ä—É–∂–∏–µ"
        elif "ü§úü¶∂" in current_sequence or "ü¶∂ü§ú" in current_sequence:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ü¶∂ –∏ ü§ú —Ä—è–¥–æ–º - –º–æ–∂–Ω–æ –ø–æ—Ç–µ—Ä—è—Ç—å —Ä–∞–≤–Ω–æ–≤–µ—Å–∏–µ"
        elif "ü¶∂" not in current_sequence:
            error = "–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ç—è –±—ã 1 –¥–µ–π—Å—Ç–≤–∏–µ ü¶∂ - –Ω—É–∂–Ω–æ —Ä–∞–∑–º—è—Ç—å –Ω–æ–≥–∏ –ø–µ—Ä–µ–¥ –±–µ–≥–æ–º"
        elif current_sequence.count("ü§ú") > 2:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ü§ú –±–æ–ª—å—à–µ –¥–≤—É—Ö —Ä–∞–∑ - —Ä—É–∫–∏ —É—Å—Ç–∞–Ω—É—Ç"
        elif current_sequence.count("ü¶∂") > 3:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ü¶∂ –±–æ–ª—å—à–µ —Ç—Ä–µ—Ö —Ä–∞–∑ - –Ω–æ–≥–∏ —É—Å—Ç–∞–Ω—É—Ç"
        elif "üî™" in current_sequence and (current_sequence[0] == "üî™" or not all([x != "üî™" or current_sequence[i] == "ü§ú" for i, x in enumerate(current_sequence[1:])])):
            error = "–ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º üî™ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ü§ú"
        elif current_sequence.count("üî™") > 2:
            error = "–Ω–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å üî™ –±–æ–ª—å—à–µ –¥–≤—É—Ö —Ä–∞–∑ - –º–æ–∂–Ω–æ –ø–æ—Ä–µ–∑–∞—Ç—å—Å—è"
        else:
            renpy.end_interaction("")